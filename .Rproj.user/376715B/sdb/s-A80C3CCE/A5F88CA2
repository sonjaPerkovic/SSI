{
    "collab_server" : "",
    "contents" : "#simulate data\n#infoSearch = data.frame(participant=rep(c(1:50), each = 400), trial=rep(c(1:200), each = 100), alternative = sample(1:4, 20000, T), attribute = sample(c(\"a\",\"b\",\"c\",\"d\"), 20000, T))\n\n#a function that wraps all necessary functions and computes SSI\n\n#identify alternative- and attribute-wise patterns ####\n\ncomputeSSI = function(df, dfRan, participant, trial, alternative, attribute, num_alt, num_att, threshold, iter) {\n\n  patterns = function(df, participant, trial, alternative, attribute, threshold) {\n\n    #change class\n    df = as.data.table(df)\n\n    #delete dwells (subsequent fixations within the same AOI)\n    df$attributeClean = ifelse(df$trial == shift(df$trial, 1L)\n                             & df$alternative == shift(df$alternative, 1L)\n                             & df$attribute == shift(df$attribute, 1L), 1, 0)\n    df = subset(df, attributeClean != 1 | is.na(attributeClean))\n    df$attributeClean = NULL\n\n    #identify alternative- and attribute-wise transitions\n    n = nrow(df)\n    df$transAlt = c(0L, df$trial[-n] == df$trial[-1] & df$alternative[-n] == df$alternative[-1])\n    df$transAtt = c(0L, df$trial[-n] == df$trial[-1] & df$attribute[-n] == df$attribute[-1])\n\n    #create counter variable which will be used for concatenating fixations into substrings\n    df$transDiff = c(0L, df$transAtt[-n] != df$transAtt[-1] & df$transAlt[-n] != df$transAlt[-1])\n    df$diff1 <- c(NA, diff(df$transDiff))\n\n    df$counter = c(1L, df$trial[-n] != df$trial[-1]\n                     | c(df$trial[-n] == df$trial[-1] &\n                         df$alternative[-n] != df$alternative[-1] &\n                         df$attribute[-n] != df$attribute[-1])\n\n                     | c(df$trial[-n] == df$trial[-1] &\n                         df$alternative[-n] != df$alternative[-1] &\n                         df$attribute[-n] == df$attribute[-1] &\n                         df$transAtt[-n] != df$transAtt[-1] &\n                         df$transAlt[-n] != df$transAlt[-1] &\n                         df$transDiff[-n] != df$transDiff[-1] &\n                         df$diff1[-n] != df$diff1[-1])\n\n                     | c(df$trial[-n] == df$trial[-1] &\n                         df$alternative[-n] != df$alternative[-1] &\n                         df$attribute[-n] == df$attribute[-1] &\n                         df$transAtt[-n] != df$transAtt[-1] &\n                         df$transAlt[-n] != df$transAlt[-1] &\n                         df$transDiff[-n] == df$transDiff[-1] &\n                         df$diff1[-n] == df$diff1[-1])\n\n                     | c(df$trial[-n] == df$trial[-1] &\n                         df$alternative[-n] == df$alternative[-1] &\n                         df$attribute[-n] != df$attribute[-1] &\n                         df$transAtt[-n] != df$transAtt[-1] &\n                         df$transAlt[-n] != df$transAlt[-1] &\n                         df$transDiff[-n] != df$transDiff[-1]))\n    df$counter = cumsum(df$counter)\n\n    #create alternative- and attribute-wise substrings based on counter variable\n    df1 = df[, list(string = paste(attribute, collapse = \"\"),\n                                   participant = unique(participant),\n                                   trial = unique(trial)), by = counter]\n\n    #function that identifies rows with identical elements only\n    identElements = function(i){\n      length(unique(unlist(strsplit(i, \"\")))) == 1\n    }\n\n    #apply 'identElements' function\n    df1$identElements = lapply(df1$string, identElements)\n\n    #subset data with alternative-wise substrings only\n    df2 = subset(df1, identElements == \"FALSE\")\n\n    #function that keeps unique elements and sorts them alphabetically\n    relaxedFreqOrder = function(i){\n      paste0(unique(sort(unlist(strsplit(i, \"\")))), collapse = \"\")\n    }\n\n    #apply 'relaxedFreqOrder' function\n    df2$string = lapply(df2$string, relaxedFreqOrder)\n\n    #change class\n    df1$string = as.character(df1$string)\n    df1$identElements = as.numeric(df1$identElements)\n    df2$string = as.character(df2$string)\n    df2$identElements = as.numeric(df2$identElements)\n\n    #merge in formatted data set with altwise substrings\n    df1 = anti_join(df1, df2, by = c(\"counter\", \"participant\", \"trial\", \"identElements\")) %>%\n          bind_rows(df2)\n    df1 = df1[order(df1$counter),]\n\n    #create counter variable for alternative-wise substrings based on string variable within each trial\n    df1 = setDT(df1)[, countEqualSubstrings := rleid(string, trial)]\n\n    #if threshold = 4, then compile next two lines, otherwise skip to line 111\n    if (threshold == 4) {\n\n    #create variable that assigns 1 to subsequent equal counter variable values\n    df1$equalCounter = ifelse(df1$countEqualSubstrings == lag(df1$countEqualSubstrings, n = 1L) |\n                              df1$countEqualSubstrings == lead(df1$countEqualSubstrings, n = 1L), 1, 0)\n\n    #subset substrings\n    df1 = df1[df1$equalCounter != 0 | df1$identElements != 0]\n    }\n\n    #combine substrings into patterns using counter variable\n    #i.e., all substrings with equal count should be collapsed into one pattern\n    df2 = df1[,list(pattern = paste(string, collapse = \"\"),\n                              participant = unique(participant),\n                              trial = unique(trial)), by = countEqualSubstrings]\n\n    #keep substrings of minimum length four\n    df2 = subset(df2, nchar(as.character(pattern)) >= threshold)\n\n    #calculate frequencies for each pattern within each trial and participant\n    df3 = setDT(df2)[, list(pattFreq = .N), by = c('pattern', 'trial', 'participant')]\n    df3\n  }\n\n  test = patterns(df, \"participant\", \"trial\", \"alternative\", \"attribute\", threshold)\n  test\n\n  #alternative- and attribute-wise pattern simulation ####\n  #the same procedure as for patterns function, just on a random data set\n\n  patternsSim = function(dfRan, participant, trial, num_alt, num_att, threshold) {\n\n    #change class\n    dfRan = as.data.table(dfRan)\n\n    #number of rows corresponding to number of fixations in original data set (total string length)\n    sim = nrow(dfRan)\n\n    #create new alternative variable (random)\n    dfRan$alternative = sample(1:num_alt, sim, T)\n\n    #create new attribute variable (random)\n    attset = letters[1:num_att]\n    dfRan$attribute = sample(attset, sim, T)\n\n    #delete dwells (subsequent fixations within the same AOI)\n    dfRan$attributeClean = ifelse(dfRan$trial == shift(dfRan$trial, 1L)\n                                & dfRan$alternative == shift(dfRan$alternative, 1L)\n                                & dfRan$attribute == shift(dfRan$attribute, 1L), 1, 0)\n    dfRan = subset(dfRan, attributeClean != 1 | is.na(attributeClean))\n    dfRan$attributeClean = NULL\n\n    #identify alternative- and attribute-wise transitions\n    n = nrow(dfRan)\n    dfRan$transAlt = c(0L, dfRan$trial[-n] == dfRan$trial[-1] & dfRan$alternative[-n] == dfRan$alternative[-1])\n    dfRan$transAtt = c(0L, dfRan$trial[-n] == dfRan$trial[-1] & dfRan$attribute[-n] == dfRan$attribute[-1])\n\n    #create counter variable which will be used for concatenating fixations into substrings\n    dfRan$transDiff = c(0L, dfRan$transAtt[-n] != dfRan$transAtt[-1] & dfRan$transAlt[-n] != dfRan$transAlt[-1])\n    dfRan$diff1 <- c(NA, diff(dfRan$transDiff))\n\n    dfRan$counter = c(1L, dfRan$trial[-n] != dfRan$trial[-1]\n                   | c(dfRan$trial[-n] == dfRan$trial[-1] &\n                         dfRan$alternative[-n] != dfRan$alternative[-1] &\n                         dfRan$attribute[-n] != dfRan$attribute[-1])\n\n                   | c(dfRan$trial[-n] == dfRan$trial[-1] &\n                         dfRan$alternative[-n] != dfRan$alternative[-1] &\n                         dfRan$attribute[-n] == dfRan$attribute[-1] &\n                         dfRan$transAtt[-n] != dfRan$transAtt[-1] &\n                         dfRan$transAlt[-n] != dfRan$transAlt[-1] &\n                         dfRan$transDiff[-n] != dfRan$transDiff[-1] &\n                         dfRan$diff1[-n] != dfRan$diff1[-1])\n\n                   | c(dfRan$trial[-n] == dfRan$trial[-1] &\n                         dfRan$alternative[-n] != dfRan$alternative[-1] &\n                         dfRan$attribute[-n] == dfRan$attribute[-1] &\n                         dfRan$transAtt[-n] != dfRan$transAtt[-1] &\n                         dfRan$transAlt[-n] != dfRan$transAlt[-1] &\n                         dfRan$transDiff[-n] == dfRan$transDiff[-1] &\n                         dfRan$diff1[-n] == dfRan$diff1[-1])\n\n                   | c(dfRan$trial[-n] == dfRan$trial[-1] &\n                         dfRan$alternative[-n] == dfRan$alternative[-1] &\n                         dfRan$attribute[-n] != dfRan$attribute[-1] &\n                         dfRan$transAtt[-n] != dfRan$transAtt[-1] &\n                         dfRan$transAlt[-n] != dfRan$transAlt[-1] &\n                         dfRan$transDiff[-n] != dfRan$transDiff[-1]))\n    dfRan$counter = cumsum(dfRan$counter)\n\n    #create alternative- and attribute-wise substrings based on counter variable\n    dfRan1 = dfRan[, list(string = paste(attribute, collapse = \"\"),\n                    participant = unique(participant),\n                    trial = unique(trial)), by = counter]\n\n    #function that identifies rows with identical elements only\n    identElements = function(i){\n      length(unique(unlist(strsplit(i, \"\")))) == 1\n    }\n\n    #apply 'identElements' function\n    dfRan1$identElements = lapply(dfRan1$string, identElements)\n\n    #subset data with alternative-wise substrings only\n    dfRan2 = subset(dfRan1, identElements == \"FALSE\")\n\n    #function that keeps unique elements and sorts them alphabetically\n    relaxedFreqOrder = function(i){\n      paste0(unique(sort(unlist(strsplit(i, \"\")))), collapse = \"\")\n    }\n\n    #apply 'relaxedFreqOrder' function\n    dfRan2$string = lapply(dfRan2$string, relaxedFreqOrder)\n\n    #change class\n    dfRan1$string = as.character(dfRan1$string)\n    dfRan1$identElements = as.numeric(dfRan1$identElements)\n    dfRan2$string = as.character(dfRan2$string)\n    dfRan2$identElements = as.numeric(dfRan2$identElements)\n\n    #merge in formatted data set with altwise substrings\n    dfRan1 = anti_join(dfRan1, dfRan2, by = c(\"counter\", \"participant\", \"trial\", \"identElements\")) %>%\n             bind_rows(dfRan2)\n    dfRan1 = dfRan1[order(dfRan1$counter),]\n\n    #create counter variable for alternative-wise substrings based on string variable within each trial\n    dfRan1 = setDT(dfRan1)[, countEqualSubstrings := rleid(string, trial)]\n\n    #if threshold = 4, then compile next two lines, otherwise skip to line 111\n    if (threshold == 4) {\n\n      #create variable that assigns 1 to subsequent equal counter variable values\n      dfRan1$equalCounter = ifelse(dfRan1$countEqualSubstrings == lag(dfRan1$countEqualSubstrings, n = 1L) |\n                                  dfRan1$countEqualSubstrings == lead(dfRan1$countEqualSubstrings, n = 1L), 1, 0)\n\n      #subset substrings\n      dfRan1 = dfRan1[dfRan1$equalCounter != 0 | dfRan1$identElements != 0]\n    }\n\n    #combine substrings into patterns using counter variable\n    #i.e., all substrings with equal count should be collapsed into one pattern\n    dfRan2 = dfRan1[,list(pattern = paste(string, collapse = \"\"),\n                    participant = unique(participant),\n                    trial = unique(trial)), by = countEqualSubstrings]\n\n    #keep substrings of minimum length four\n    dfRan2 = subset(dfRan2, nchar(as.character(pattern)) >= threshold)\n\n    #calculate frequencies for each pattern within each trial and participant\n    dfRan3 = setDT(dfRan2)[, list(N = .N), by = c('pattern', 'trial', 'participant')]\n    dfRan3\n  }\n\n  test1 = patternsSim(dfRan, \"participant\", \"trial\", num_alt, num_att, threshold)\n  test1\n\n  #replicate 'patternsSim' function n times ####\n\n  patternsSimRep = function(dfRan, participant, trial, num_alt, num_att, threshold, iter) {\n    do.call(rbind, lapply(1:iter, function(i) patternsSim(dfRan, participant, trial, num_alt, num_att, threshold)))\n  }\n\n  test2 = patternsSimRep(dfRan, \"participant\", \"trial\", num_alt, num_att, threshold, iter)\n  test2\n\n  #calculate probabilities and probability complements ####\n\n  #function which compares pattern frequencies in original and simulated data sets for each participant, condition and trial\n  patternsProb = function(df, df1, iter) {\n\n    probPatterns = function(i) {\n      sum(df1$pattern == df$pattern[i]\n          & df1$participant == df$participant[i]\n          & df1$trial == df$trial[i]\n          & df1$N >= df$pattFreq[i])\n    }\n\n    #apply 'probPatterns' function\n    df$pattFreqSim = sapply(1:nrow(df), probPatterns)\n\n    #calculate probabilities\n    df$probability = df$pattFreqSim / iter\n\n    #calculate probability complements\n    df$probComplement = 1 - df$probability\n\n    #calculate pattern lenghts\n    df$pattLength = nchar(df$pattern)\n    df\n  }\n\n  test3 = patternsProb(test, test2, iter)\n  test3\n\n  #apply SSI equation ####\n\n  applySSIequation = function(df, df1, participant, trial, alternative, attribute) {\n\n    #change class\n    df = as.data.table(df)\n\n    #calculate string length for each trial\n    df$attributeClean = ifelse(df$trial == shift(df$trial, 1L)\n                               & df$alternative == shift(df$alternative, 1L)\n                               & df$attribute == shift(df$attribute, 1L), 1, 0)\n    df = subset(df, attributeClean != 1 | is.na(attributeClean))\n    df[, \"attributeClean\" := NULL]\n    setkey(df, \"participant\", \"trial\")\n    stringLength = df[, list(N = NROW(attribute)), by = key(df)]\n\n    #calculate numerator for SSI\n    df1$numerator = df1$pattLength * df1$pattFreq * df1$probComplement\n    setkey(df1, \"participant\", \"trial\")\n    df2 = df1[, list(patternSum = sum(numerator)), by = key(df1)]\n\n    #format data\n    df2 = as.data.table(df2)\n    df2$participant = as.numeric(df2$participant)\n    df2$trial = as.numeric(df2$trial)\n    df2 = df2[order(participant, trial),]\n\n    #merge in trial string leghts\n    df2 = merge(df2, stringLength, by = c(\"participant\", \"trial\"), all = T)\n    df2[is.na(df2)] = 0\n\n    #compute SSI\n    df2$SSI = df2$patternSum / df2$N\n    df2\n  }\n\n  test4 = applySSIequation(df, test3, \"participant\", \"trial\", \"alternative\", \"attribute\")\n  test4\n\n  #save table\n  #in case we want to perform some data analyses without doing simulation again\n  write.csv(file=\"SSI.csv\", x = test4)\n}\n\n#testFinal = computeSSI(infoSearch, infoSearch, \"participant\", \"trial\", \"alternative\", \"attribute\", 4, 4, 2, 100)\n\n\n\n\n",
    "created" : 1509005734318.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3330544794",
    "id" : "A5F88CA2",
    "lastKnownWriteTime" : 1516726396,
    "last_content_update" : 1516726396068,
    "path" : "~/Dropbox/SSI/R/SSI_R_package.R",
    "project_path" : "R/SSI_R_package.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}